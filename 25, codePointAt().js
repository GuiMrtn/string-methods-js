// la m√©thode codePointAt() renvoie le point de code Unicode complet d'un caract√®re √† une position sp√©cifique dans une cha√Æne. Cela permet d'obtenir le code Unicode m√™me pour les caract√®res qui n√©cessitent plus de 16 bits (comme certains caract√®res sp√©ciaux et les √©mojis), contrairement √† charCodeAt() qui ne renvoie que des valeurs sur 16 bits. Si on passe un index qui est en dehors de la longueur de la cha√Æne, la m√©thode retournera undefined. La syntaxe est celle-ci : str.codePointAt(index).

//index : La position du caract√®re dans la cha√Æne pour lequel on souhaite obtenir le point de code Unicode. Cet index commence √† 0.



// 1. Obtenir le code d'un caract√®re classique
// Pour les caract√®res simples (ceux cod√©s sur 16 bits, comme les lettres de l'alphabet), codePointAt() fonctionne de mani√®re similaire √† charCodeAt().
let string = "Bonjour";
let code = string.codePointAt(0);
console.log(code);  //66 ('B' a le point de code 66)



//2. Obtenir le point de code d'un √©moji
// Les √©mojis et certains caract√®res sp√©ciaux Unicode n√©cessitent plus de 16 bits. codePointAt() permet de r√©cup√©rer correctement leur point de code complet.
let string1 = "üê±";  // Emoji du chat
let code1 = string1.codePointAt(0);
console.log(code1);  // 128049



//3. Obtenir plusieurs points de code
let string2 = "Hello üê±";
for (let i = 0; i < string2.length; i++) {
  console.log(string2.codePointAt(i));
}
// Output:
// 72 ('H')
// 101 ('e')
// 108 ('l')
// 108 ('l')
// 111 ('o')
// 32 (espace)
// 128049 ('üê±' point de code complet)



//4. Gestion des index hors limites
let string3 = "Hello";
console.log(string3.codePointAt(10));  // Output: undefined


